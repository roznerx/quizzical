[{"C:\\Users\\roznerx\\Desktop\\quizzical\\pages\\index.tsx":"1","C:\\Users\\roznerx\\Desktop\\quizzical\\pages\\_app.tsx":"2","C:\\Users\\roznerx\\Desktop\\quizzical\\components\\Answers.tsx":"3","C:\\Users\\roznerx\\Desktop\\quizzical\\components\\Question.tsx":"4","C:\\Users\\roznerx\\Desktop\\quizzical\\components\\Quizz.tsx":"5","C:\\Users\\roznerx\\Desktop\\quizzical\\components\\Start.tsx":"6"},{"size":2222,"mtime":1684189135520,"results":"7","hashOfConfig":"8"},{"size":1173,"mtime":1684188326610,"results":"9","hashOfConfig":"8"},{"size":2815,"mtime":1684188326595,"results":"10","hashOfConfig":"8"},{"size":493,"mtime":1684188326598,"results":"11","hashOfConfig":"8"},{"size":4918,"mtime":1684189170638,"results":"12","hashOfConfig":"8"},{"size":825,"mtime":1684188326600,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"10ivaex",{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\roznerx\\Desktop\\quizzical\\pages\\index.tsx",[],[],"C:\\Users\\roznerx\\Desktop\\quizzical\\pages\\_app.tsx",[],[],"C:\\Users\\roznerx\\Desktop\\quizzical\\components\\Answers.tsx",["33"],[],"import { useEffect, useState } from 'react';\r\nimport { arrShuffle, replacer } from '../utils/helpers';\r\nimport { nanoid } from 'nanoid';\r\nimport { Button, Grid } from '@mui/material';\r\nimport { AnswersProps, SelectedAnswer, Answers } from '../interfaces';\r\nimport { answerBtnStyles } from '../styles/answers';\r\n\r\nexport default function Answers({ answers, setSelectedAnswers, correctAnswer, check }: AnswersProps) {\r\n    const [selectedAnswer, setSelectedAnswer] = useState<number>(null);\r\n    const [selectedAnswerText, setSelectedAnswerText] = useState<string>(\"\");\r\n    const [answersArr, setAnswersArr] = useState<Answers>();\r\n    \r\n    function handleClick(answersIndex: number, a: string, index: number) {\r\n        setSelectedAnswer(index);\r\n        setSelectedAnswerText(a);\r\n        setSelectedAnswers((prevState: SelectedAnswer[]) => {\r\n            let prevArr = [...prevState];\r\n            prevArr[answersIndex].answer = a;\r\n            return prevArr;\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (!answersArr) {\r\n            const { index, answers: prevArr } = answers;\r\n            const shuffledArr = arrShuffle(prevArr);\r\n            setAnswersArr({ index, answers: shuffledArr });\r\n        }\r\n    }, [answers]);\r\n\r\n    return (\r\n        <Grid container sx={{display: \"flex\", flexDirection: \"row\", gap: \"1rem\"}}>\r\n            {\r\n                answersArr && answersArr.answers.map((a, index) => {\r\n                    const answersIndex = answersArr.index;\r\n                    return (\r\n                        <Button\r\n                            key={index} \r\n                            onClick={() => handleClick(answersIndex, a, index)}\r\n                            sx={\r\n                                !check ?\r\n                                selectedAnswer !== index ? \r\n                                answerBtnStyles : \r\n                                {...answerBtnStyles, backgroundColor: \"#D6DBF5\"} :\r\n                                    \r\n                                selectedAnswer == index && selectedAnswerText === correctAnswer ?\r\n                                {...answerBtnStyles, backgroundColor: \"#94D7A2\"} :\r\n                                selectedAnswer == index && selectedAnswerText != correctAnswer ?\r\n                                {...answerBtnStyles, backgroundColor: \"#F8BCBC\"} :\r\n                                a === correctAnswer ? \r\n                                {...answerBtnStyles, backgroundColor: \"#94D7A2\"} :\r\n                                {...answerBtnStyles, color: \"#4D5B9E\", border: \"1px solid #4D5B9E\"} \r\n                            }\r\n                        >\r\n                            {replacer(a)}\r\n                        </Button>\r\n                    )\r\n                })\r\n            }\r\n        </Grid>\r\n    );\r\n};\r\n","C:\\Users\\roznerx\\Desktop\\quizzical\\components\\Question.tsx",[],[],"C:\\Users\\roznerx\\Desktop\\quizzical\\components\\Quizz.tsx",[],[],"C:\\Users\\roznerx\\Desktop\\quizzical\\components\\Start.tsx",[],[],{"ruleId":"34","severity":1,"message":"35","line":29,"column":8,"nodeType":"36","endLine":29,"endColumn":17,"suggestions":"37"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'answersArr'. Either include it or remove the dependency array.","ArrayExpression",["38"],{"desc":"39","fix":"40"},"Update the dependencies array to be: [answers, answersArr]",{"range":"41","text":"42"},[1230,1239],"[answers, answersArr]"]